/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.cafe.ui;

import java.awt.Frame;
import java.util.Date;
import javax.swing.JDialog;
import lombok.*;
import poly.cafe.entity.Bill;
import poly.cafe.ui.BillController.BillController;
import poly.cafe.dao.BillDetailDAO;
import poly.cafe.dao.impl.BillDetailDAOImpl;
import poly.cafe.entity.BillDetail;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import poly.cafe.util.XDialog;
import poly.cafe.dao.BillDAO;
import poly.cafe.dao.CardDAO;
import poly.cafe.util.XDate;
import poly.cafe.dao.impl.BillDAOImpl;
import poly.cafe.dao.impl.CardDAOImpl;
import poly.cafe.entity.Card;

@Setter
/**
 *
 * @author hang
 */
public class BillJDialog extends JDialog implements BillController {

    private Bill bill;
    private BillDetailDAO billDetailDao;
    private List<BillDetail> billDetails;
    private BillDAO billDAO = new BillDAOImpl(); // đảm bảo không null
    private Card card;


    /**
     * Creates new form BillJDialog
     */
    public BillJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        billDetailDao = new BillDetailDAOImpl();
        billDAO = new BillDAOImpl();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCardId = new javax.swing.JTextField();
        txtCheckin = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        txtCheckout = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBillDetails = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        bt_datdo1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Mã Phiếu");

        jLabel2.setText("Thẻ số");

        jLabel3.setText("Thời điểm đăt hàng");

        jLabel4.setText("Thời điểm thanh toán");

        jLabel5.setText("Nhân viên");

        jLabel6.setText("Trạng thái");

        tblBillDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "", "BILL DETAIL ID", "Đồ Uống", "Đơn giá", "Giảm giá", "Số lượng", "thành tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblBillDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBillDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBillDetails);

        btnRemove.setText("Xoá đồ uống");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnAdd.setText("Thêm đồ uống");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnCheckout.setText("Thnah toán");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        btnCancel.setText("Huỷ phiếu");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        bt_datdo1.setText("Đặt đồ");
        bt_datdo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_datdo1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCardId, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRemove)
                .addGap(18, 18, 18)
                .addComponent(btnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bt_datdo1)
                .addGap(18, 18, 18)
                .addComponent(btnCheckout)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCardId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemove)
                    .addComponent(btnAdd)
                    .addComponent(btnCheckout)
                    .addComponent(btnCancel)
                    .addComponent(bt_datdo1))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        this.removeDrinks();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        this.checkout();
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        this.showDrinkJDialog();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.cancel();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void tblBillDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBillDetailsMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            this.updateQuantity();
        }
    }//GEN-LAST:event_tblBillDetailsMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.close();
    }//GEN-LAST:event_formWindowClosed

    private void bt_datdo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_datdo1ActionPerformed
       if (card != null) {
            card.setStatus(3); // Cập nhật trạng thái lỗi
            CardDAO dao = new CardDAOImpl();
            dao.update(card); // Gửi thay đổi xuống DB
             this.edit();
            XDialog.alert("đặt đồ thành công");
            this.dispose();
           
        }
    }//GEN-LAST:event_bt_datdo1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BillJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BillJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BillJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BillJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BillJDialog dialog = new BillJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_datdo1;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBillDetails;
    private javax.swing.JTextField txtCardId;
    private javax.swing.JTextField txtCheckin;
    private javax.swing.JTextField txtCheckout;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtStatus;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    @Override
    public void fillBillDetails() {
        if (bill != null) {
            billDetails = billDetailDao.findByBillId(bill.getId());
            DefaultTableModel model = (DefaultTableModel) tblBillDetails.getModel();
            model.setRowCount(0);

            for (BillDetail detail : billDetails) {
                Object[] row = {
                    false, // checkbox
                    detail.getId(),
                    detail.getDrinkName(),
                    detail.getUnitPrice(),
                    detail.getDiscount(),
                    detail.getQuantity(),
                    detail.getUnitPrice() * detail.getQuantity() * (1 - detail.getDiscount())
                };
                model.addRow(row);
            }
        }
    }

    @Override
    public void selectTimeRange() {

    }

    @Override
    public void open() {
        setLocationRelativeTo(null);
        selectTimeRange();
        if (bill == null) {
            bill = new Bill();
            bill.setCheckin(new Date());
            bill.setStatus(2); // Trạng thái Servicing
            billDAO.create(bill);
        }
        setForm(bill);
        fillBillDetails();
    }

    @Override
    public void close() {
        if (bill != null) {
            fillBillDetails(); // Initialize billDetails before checking
            if (billDetails != null && billDetails.isEmpty()) {
                billDAO.deleteById(bill.getId());
            }
        }
    }

    @Override
    public void showDrinkJDialog() {
        DrinkJDialog dialog = new DrinkJDialog((Frame) this.getOwner(), true);
        dialog.setBill(bill); // Khai báo vào DrinkJDialog @Setter Bill bill
        dialog.setVisible(true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent e) {
                BillJDialog.this.fillBillDetails();
            }
        });
    }

    @Override
    public void removeDrinks() {
        for (int i = 0; i < tblBillDetails.getRowCount(); i++) {
            Boolean checked = (Boolean) tblBillDetails.getValueAt(i, 0);
            if (checked != null && checked) {
                billDetailDao.deleteById(billDetails.get(i).getId());
            }
        }
        this.fillBillDetails();
    }

    @Override
    public void updateQuantity() {
        if (bill.getStatus() == 0) { // chưa thanh toán hoặc chưa bị canceled
            String input = XDialog.prompt("Số lượng mới?");
            if (input != null && input.length() > 0) {
                BillDetail detail = billDetails.get(tblBillDetails.getSelectedRow());
                detail.setQuantity(Integer.parseInt(input));
                billDetailDao.update(detail);
                this.fillBillDetails();
            }
        }
    }

    @Override
    public void checkout() {
        if (XDialog.confirm("Bạn muốn thanh toán phiếu bán hàng?")) {
            bill.setStatus(1); // Chuyển sang Completed
            bill.setCheckout(new Date());
            billDAO.update(bill);
            this.setForm(bill);
            
            // Cập nhật trạng thái card về trống
            if (card != null) {
                card.setStatus(1); // Trở về trạng thái còn trống
                CardDAO cardDao = new CardDAOImpl();
                cardDao.update(card);
            }
            
            // Tạo hóa đơn mới
            Bill newBill = new Bill();
            newBill.setCheckin(new Date());
            newBill.setStatus(2); // Servicing
            newBill.setCardId(bill.getCardId()); // Giữ nguyên card ID
            newBill.setUsername(bill.getUsername()); // Giữ nguyên username
            billDAO.create(newBill);
            
            this.dispose(); // Đóng dialog hiện tại
        }
    }

    @Override
    public void cancel() {
        if (billDetails.isEmpty()) {
            billDAO.deleteById(bill.getId());
            // Cập nhật trạng thái card về trống
            if (card != null) {
                card.setStatus(1); // Trở về trạng thái còn trống
                CardDAO cardDao = new CardDAOImpl();
                cardDao.update(card);
            }
            this.dispose();
        } else {
            XDialog.alert("Không thể hủy phiếu đã có đồ uống!");
        }
    }

    @Override
    public void setForm(Bill bill) {
        if (bill != null) {
            txtId.setText(String.valueOf(bill.getId()));
            txtCardId.setText("Card #" + bill.getCardId());
            txtCheckin.setText(XDate.format(bill.getCheckin(), "HH:mm:ss dd-MM-yyyy"));
            txtUsername.setText(bill.getUsername());
            String[] statuses = {"Canceled", "Completed", "Servicing"};
            txtStatus.setText(statuses[bill.getStatus()]);
            if (bill.getCheckout() != null) {
                txtCheckout.setText(XDate.format(bill.getCheckout(), "HH:mm:ss dd-MM-yyyy"));
            } else {
                txtCheckout.setText("");
            }
            
            boolean editable = (bill.getStatus() == 0); // Chỉ cho phép chỉnh sửa khi đang phục vụ
            btnAdd.setEnabled(editable);
            btnCancel.setEnabled(editable);
            btnCheckout.setEnabled(editable);
            btnRemove.setEnabled(editable);
        }
    }

    @Override
    public Bill getForm() {
        Bill entity = new Bill();

        try {
            if (!txtId.getText().trim().isEmpty()) {
                entity.setId(Long.valueOf(txtId.getText().trim()));
            }
        } catch (NumberFormatException e) {
            XDialog.alert("ID không hợp lệ.");
            return null;
        }

        try {
            String cardIdText = txtCardId.getText().trim();
            if (cardIdText.startsWith("Card #")) {
                cardIdText = cardIdText.substring(6);
            }
            entity.setCardId(Integer.valueOf(cardIdText));
        } catch (NumberFormatException e) {
            XDialog.alert("Thẻ số không hợp lệ.");
            return null;
        }

        try {
            entity.setCheckin(XDate.parse(txtCheckin.getText().trim(), "HH:mm:ss dd-MM-yyyy"));
        } catch (Exception e) {
            XDialog.alert("Sai định dạng thời gian tạo.");
            return null;
        }

        try {
            String checkoutText = txtCheckout.getText().trim();
            if (!checkoutText.isEmpty()) {
                entity.setCheckout(XDate.parse(checkoutText, "HH:mm:ss dd-MM-yyyy"));
            }
        } catch (Exception e) {
            XDialog.alert("Sai định dạng thời gian thanh toán.");
            return null;
        }

        String username = txtUsername.getText().trim();
        entity.setUsername((username != null && !username.isEmpty()) ? username : "unknown");

        String statusText = txtStatus.getText().trim();
        if (statusText.equals("Servicing")) {
            entity.setStatus(2);
        } else if (statusText.equals("Completed")) {
            entity.setStatus(1);
        } else {
            entity.setStatus(0);
        }

        return entity;
    }

    @Override
    public void fillToTable() {
    }

    @Override
    public void edit() {
    }

    @Override
    public void create() {
    }

    @Override
    public void update() {
    }

    @Override
    public void delete() {
    }

    @Override
    public void clear() {
    }

    @Override
    public void setEditable(boolean editable) {
    }

    @Override
    public void checkAll() {
    }

    @Override
    public void uncheckAll() {
    }

    @Override
    public void deleteCheckedItems() {
        if (XDialog.confirm("Bạn thực sự muốn xóa các mục chọn?")) {
            for (int i = 0; i < tblBillDetails.getRowCount(); i++) {
                if ((Boolean) tblBillDetails.getValueAt(i, 0)) {
                    billDetailDao.deleteById(billDetails.get(i).getId());
                }
            }
            this.fillBillDetails();
        }
    }

    @Override
    public void moveFirst() {
    }

    @Override
    public void movePrevious() {
    }

    @Override
    public void moveNext() {
    }

    @Override
    public void moveLast() {
    }

    @Override
    public void moveTo(int index) {
    }

    void setill(Bill bill) {
       this.bill = bill;
        if (bill != null) {
            CardDAO cardDao = new CardDAOImpl();
            this.card = cardDao.findById(bill.getCardId());
        }
    }
}
